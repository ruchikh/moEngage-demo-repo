/*
 * Copyright (c) 2014-2022 MoEngage Inc.
 *
 * All rights reserved.
 *
 *  Use of source code or binaries contained within MoEngage SDK is permitted only to enable use of the MoEngage platform by customers of MoEngage.
 *  Modification of source code and inclusion in mobile apps is explicitly allowed provided that all other conditions are met.
 *  Neither the name of MoEngage nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
 *  Redistribution of source code or binaries is disallowed except with specific prior written permission. Any such redistribution must retain the above copyright notice, this list of conditions and the following disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.moengage.capacitor

import android.content.Context
import com.moengage.capacitor.internal.INTEGRATION_TYPE
import com.moengage.capacitor.internal.MODULE_TAG
import com.moengage.core.LogLevel
import com.moengage.core.MoEngage
import com.moengage.core.internal.logger.Logger
import com.moengage.core.internal.model.IntegrationMeta
import com.moengage.core.model.SdkState
import com.moengage.plugin.base.internal.PluginInitializer

/**
 * @author Arshiya Khanum
 */
public object MoEInitializer {
    private const val tag = "${MODULE_TAG}MoEInitializer"

    @Deprecated(
        message = "This method is deprecated.",
        ReplaceWith(expression = "MoEInitializer.initialiseDefaultInstance()")
    )
    /**
     * Initialise the default instance of SDK with configuration provided in [MoEngage.Builder]
     *
     * @param context Context
     * @param builder Instance of [MoEngage.Builder]
     */
    @JvmStatic
    public fun initialize(context: Context, builder: MoEngage.Builder) {
        try {
            Logger.print { "$tag initialize() : Will try to initialize the sdk." }
            initialize(context, builder, true)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag initialize() : " }
        }
    }

    @Deprecated(
        message = "This method is deprecated.",
        ReplaceWith(expression = "MoEInitializer.initialiseDefaultInstance()")
    )
    /**
     * Initialise the default instance of SDK with configuration provided in [MoEngage.Builder]
     *
     * @param context Context
     * @param builder Instance of [MoEngage.Builder]
     * @param isSdkEnabled [Boolean]
     */
    @JvmStatic
    public fun initialize(context: Context, builder: MoEngage.Builder, isSdkEnabled: Boolean) {
        try {
            Logger.print { "$tag initialize() : Initialising MoEngage SDK." }
            PluginInitializer.initialize(
                builder,
                IntegrationMeta(INTEGRATION_TYPE, BuildConfig.MOENGAGE_CAPACITOR_LIBRARY_VERSION),
                if (isSdkEnabled) SdkState.ENABLED else SdkState.DISABLED
            )
            Logger.print { "$tag initialize() : Initialising MoEngage SDK." }
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR) { "$tag initialize() : " }
        }
    }
    
    /**
     * Initialise the default instance of SDK with configuration provided in [MoEngage.Builder]
     *
     * @param context Context
     * @param builder Instance of [MoEngage.Builder]
     */
    @JvmStatic
    public fun initialiseDefaultInstance(
        context: Context,
        builder: MoEngage.Builder
    ) {
        try {
            Logger.print { "$tag initialiseDefaultInstance() : Will try to initialize the sdk." }
            PluginInitializer.initialize(
                builder,
                IntegrationMeta(INTEGRATION_TYPE, BuildConfig.MOENGAGE_CAPACITOR_LIBRARY_VERSION),
                SdkState.ENABLED
            )
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag initialiseDefaultInstance() : " }
        }
    }

    /**
     * Initialise the default instance of SDK with configuration provided in [MoEngage.Builder] and
     * SDK state, i.e. whether the SDK should be in enabled or disabled state.
     *
     * By default the SDK is enabled. Use this API only if you have a requirement to
     * enable/disable SDK, else use [MoEngage.initialiseDefaultInstance].
     *
     * **Note:** State is persisted across session, once the SDK is disabled it will remain
     * in disabled state until enabled again.
     *
     * @param context Context
     * @param builder Instance of [MoEngage.Builder]
     * @param sdkState [SdkState]
     */
    @JvmStatic
    public fun initialiseDefaultInstance(
        context: Context,
        builder: MoEngage.Builder,
        sdkState: SdkState
    ) {
        try {
            Logger.print { "$tag initialiseDefaultInstance() : Will try to initialize the sdk." }
            PluginInitializer.initialize(
                builder,
                IntegrationMeta(INTEGRATION_TYPE, BuildConfig.MOENGAGE_CAPACITOR_LIBRARY_VERSION),
                sdkState
            )
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag initialiseDefaultInstance() : " }
        }
    }
}