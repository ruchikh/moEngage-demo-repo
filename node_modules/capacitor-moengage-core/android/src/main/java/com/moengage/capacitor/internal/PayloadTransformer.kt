/*
 * Copyright (c) 2014-2022 MoEngage Inc.
 *
 * All rights reserved.
 *
 *  Use of source code or binaries contained within MoEngage SDK is permitted only to enable use of the MoEngage platform by customers of MoEngage.
 *  Modification of source code and inclusion in mobile apps is explicitly allowed provided that all other conditions are met.
 *  Neither the name of MoEngage nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
 *  Redistribution of source code or binaries is disallowed except with specific prior written permission. Any such redistribution must retain the above copyright notice, this list of conditions and the following disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.moengage.capacitor.internal

import com.getcapacitor.JSObject
import com.moengage.core.internal.USER_ATTRIBUTE_UNIQUE_ID
import com.moengage.core.internal.USER_ATTRIBUTE_USER_BDAY
import com.moengage.core.internal.USER_ATTRIBUTE_USER_EMAIL
import com.moengage.core.internal.USER_ATTRIBUTE_USER_FIRST_NAME
import com.moengage.core.internal.USER_ATTRIBUTE_USER_GENDER
import com.moengage.core.internal.USER_ATTRIBUTE_USER_LAST_NAME
import com.moengage.core.internal.USER_ATTRIBUTE_USER_LOCATION
import com.moengage.core.internal.USER_ATTRIBUTE_USER_MOBILE
import com.moengage.core.internal.USER_ATTRIBUTE_USER_NAME
import com.moengage.core.internal.logger.Logger
import com.moengage.core.internal.model.AttributeType
import com.moengage.core.model.user.deletion.UserDeletionData
import com.moengage.plugin.base.internal.ARGUMENT_ACCOUNT_META
import com.moengage.plugin.base.internal.ARGUMENT_APP_ID
import com.moengage.plugin.base.internal.ARGUMENT_ATTRIBUTE_NAME
import com.moengage.plugin.base.internal.ARGUMENT_ATTRIBUTE_VALUE
import com.moengage.plugin.base.internal.ARGUMENT_DATA
import com.moengage.plugin.base.internal.ARGUMENT_EVENT_ATTRIBUTES
import com.moengage.plugin.base.internal.ARGUMENT_EVENT_NAME
import com.moengage.plugin.base.internal.ARGUMENT_GENERAL_EVENT_ATTRIBUTES
import com.moengage.plugin.base.internal.ARGUMENT_IS_NON_INTERACTIVE_EVENT
import com.moengage.plugin.base.internal.ARGUMENT_IS_SDK_ENABLED
import com.moengage.plugin.base.internal.ARGUMENT_LOCATION_ATTRIBUTE
import com.moengage.plugin.base.internal.ARGUMENT_LOCATION_EVENT_ATTRIBUTES
import com.moengage.plugin.base.internal.ARGUMENT_PAYLOAD
import com.moengage.plugin.base.internal.ARGUMENT_PLATFORM
import com.moengage.plugin.base.internal.ARGUMENT_SERVICE
import com.moengage.plugin.base.internal.ARGUMENT_STATE
import com.moengage.plugin.base.internal.ARGUMENT_TIMESTAMP_EVENT_ATTRIBUTES
import com.moengage.plugin.base.internal.ARGUMENT_TYPE
import com.moengage.plugin.base.internal.model.PermissionType
import com.moengage.pushbase.internal.repository.NAME
import com.moengage.pushbase.internal.repository.VALUE
import com.moengage.pushbase.model.PushService
import org.json.JSONArray
import org.json.JSONObject

/**
 * @author Arshiya Khanum
 */

private const val ARGUMENT_UNIQUE_ID = "uniqueId"
private const val ARGUMENT_ALIAS = "alias"
private const val ARGUMENT_USER_NAME = "userName"
private const val ARGUMENT_FIRST_NAME = "firstName"
private const val ARGUMENT_LAST_NAME = "lastName"
private const val ARGUMENT_EMAIL_ID = "emailId"
private const val ARGUMENT_MOBILE_NUMBER = "mobileNumber"
private const val ARGUMENT_BIRTH_DATE = "birthdate"
private const val ARGUMENT_GENDER = "gender"
private const val ARGUMENT_LOCATION = "location"
private const val ARGUMENT_APP_STATUS = "appStatus"

private const val ARGUMENT_NAME = "name"
private const val ARGUMENT_VALUE = "value"

private const val ARGUMENT_CONTEXTS = "contexts"
private const val ARGUMENT_TOKEN = "token"

private const val ARGUMENT_ANDROID_ID_TRACKING = "isAndroidIdTrackingEnabled"
private const val ARGUMENT_AD_ID_TRACKING = "isAdIdTrackingEnabled"
private const val ARGUMENT_DEVICE_ID_TRACKING = "isDeviceIdTrackingEnabled"

private const val ARGUMENT_IS_GRANTED = "isGranted"
private const val ARGUMENT_IS_SUCCESS = "isSuccess"

internal class PayloadTransformer {

    private val tag = "${MODULE_TAG}PayloadTransformer"

    internal fun getInitialisePayload(jsonObject: JSONObject): JSONObject {
        val initialisePayload = JSONObject()
        initialisePayload.put(ARGUMENT_ACCOUNT_META, getAccountMeta(jsonObject))
        return initialisePayload
    }

    internal fun toEventPayload(eventJson: JSONObject): JSONObject {
        val eventJsonPayload = JSONObject()
        eventJsonPayload.put(ARGUMENT_ACCOUNT_META, getAccountMeta(eventJson))
        eventJsonPayload.put(ARGUMENT_DATA, toEventDataJson(eventJson))

        return eventJsonPayload
    }

    private fun toEventDataJson(eventJson: JSONObject): JSONObject {
        val dataJSON = JSONObject()
        dataJSON.put(ARGUMENT_EVENT_NAME, eventJson.getString(ARGUMENT_EVENT_NAME))

        val eventAttributes = eventJson.optJSONObject(ARGUMENT_EVENT_ATTRIBUTES) ?: return dataJSON

        val eventAttributesPayload = JSONObject()
        Logger.print { " $tag toEventDataJson() : $eventJson" }
        if (eventAttributes.has(ARGUMENT_GENERAL_EVENT_ATTRIBUTES)) {
            eventAttributesPayload.put(
                ARGUMENT_GENERAL_EVENT_ATTRIBUTES,
                arrayToJson(eventAttributes.getJSONArray(ARGUMENT_GENERAL_EVENT_ATTRIBUTES))
            )
        }
        if (eventAttributes.has(ARGUMENT_TIMESTAMP_EVENT_ATTRIBUTES)) {
            eventAttributesPayload.put(
                ARGUMENT_TIMESTAMP_EVENT_ATTRIBUTES,
                arrayToJson(eventAttributes.getJSONArray(ARGUMENT_TIMESTAMP_EVENT_ATTRIBUTES))
            )
        }

        if (eventAttributes.has(ARGUMENT_LOCATION_EVENT_ATTRIBUTES)) {
            eventAttributesPayload.put(
                ARGUMENT_LOCATION_EVENT_ATTRIBUTES,
                arrayToJson(eventAttributes.getJSONArray(ARGUMENT_LOCATION_EVENT_ATTRIBUTES))
            )
        }

        dataJSON.put(ARGUMENT_EVENT_ATTRIBUTES, eventAttributesPayload)
        dataJSON.put(ARGUMENT_IS_NON_INTERACTIVE_EVENT, eventAttributes.optBoolean(ARGUMENT_IS_NON_INTERACTIVE_EVENT, false))

        return dataJSON
    }

    private fun arrayToJson(jsonArray: JSONArray): JSONObject {
        val jsonObject = JSONObject()
        for (i in 0 until jsonArray.length()) {
            val json = jsonArray.getJSONObject(i)
            jsonObject.put(json.getString(NAME), json.get(VALUE))
        }
        return jsonObject
    }

    internal fun toUniqueIdPayload(json: JSONObject): JSONObject {
        return toUserAttributeJSON(
            json,
            USER_ATTRIBUTE_UNIQUE_ID,
            json.getString(ARGUMENT_UNIQUE_ID),
            AttributeType.GENERAL
        )
    }

    internal fun toAliasPayload(json: JSONObject): JSONObject {
        val uniqueIdJson = JSONObject()
        uniqueIdJson.put(ARGUMENT_ACCOUNT_META, getAccountMeta(json))

        val dataJson = JSONObject()
        dataJson.put(ARGUMENT_ALIAS, json.get(ARGUMENT_ALIAS))

        uniqueIdJson.put(ARGUMENT_DATA, dataJson)
        return uniqueIdJson
    }

    internal fun toUserNamePayload(json: JSONObject): JSONObject {
        return toUserAttributeJSON(
            json,
            USER_ATTRIBUTE_USER_NAME,
            json.getString(ARGUMENT_USER_NAME),
            AttributeType.GENERAL
        )
    }

    internal fun toUserFirstNameJson(json: JSONObject): JSONObject {
        return toUserAttributeJSON(
            json,
            USER_ATTRIBUTE_USER_FIRST_NAME,
            json.getString(ARGUMENT_FIRST_NAME),
            AttributeType.GENERAL
        )
    }

    internal fun toUserLastNameJson(json: JSONObject): JSONObject {
        return toUserAttributeJSON(
            json,
            USER_ATTRIBUTE_USER_LAST_NAME,
            json.getString(ARGUMENT_LAST_NAME),
            AttributeType.GENERAL
        )
    }

    internal fun toUserEmailIdJson(json: JSONObject): JSONObject {
        return toUserAttributeJSON(
            json,
            USER_ATTRIBUTE_USER_EMAIL,
            json.getString(ARGUMENT_EMAIL_ID),
            AttributeType.GENERAL
        )
    }


    internal fun toUserMobileNumberJson(json: JSONObject): JSONObject {
        return toUserAttributeJSON(
            json,
            USER_ATTRIBUTE_USER_MOBILE,
            json.getString(ARGUMENT_MOBILE_NUMBER),
            AttributeType.GENERAL
        )
    }

    internal fun toUserBirthDateJson(json: JSONObject): JSONObject {
        return toUserAttributeJSON(
            json,
            USER_ATTRIBUTE_USER_BDAY,
            json.getString(ARGUMENT_BIRTH_DATE),
            AttributeType.TIMESTAMP
        )
    }

    internal fun toUserGenderJson(json: JSONObject): JSONObject {
        return toUserAttributeJSON(
            json,
            USER_ATTRIBUTE_USER_GENDER,
            json.getString(ARGUMENT_GENDER),
            AttributeType.GENERAL
        )
    }

    internal fun toUserLocationJson(json: JSONObject): JSONObject {
        return toUserAttributeJSON(
            json,
            USER_ATTRIBUTE_USER_LOCATION,
            "",
            AttributeType.LOCATION,
            json.getJSONObject(ARGUMENT_LOCATION)
        )
    }

    internal fun toUserAttributeJson(json: JSONObject): JSONObject {
        return toUserAttributeJSON(
            json,
            json.getString(ARGUMENT_NAME),
            json.get(ARGUMENT_VALUE),
            AttributeType.GENERAL
        )
    }

    internal fun toUserAttributeLocationJson(json: JSONObject): JSONObject {
        return toUserAttributeJSON(
            json,
            json.getString(ARGUMENT_NAME),
            "",
            AttributeType.LOCATION,
            json.getJSONObject(ARGUMENT_LOCATION)
        )
    }

    internal fun toUserUserAttributeISODateJson(json: JSONObject): JSONObject {
        return toUserAttributeJSON(
            json,
            json.getString(ARGUMENT_NAME),
            json.get(ARGUMENT_VALUE),
            AttributeType.TIMESTAMP
        )
    }

    private fun toUserAttributeJSON(
        json: JSONObject,
        name: String,
        value: Any,
        type: AttributeType,
        locationAttribute: JSONObject? = null
    ): JSONObject {
        val userAttributeJSON = JSONObject()
        userAttributeJSON.put(ARGUMENT_ACCOUNT_META, getAccountMeta(json))

        val dataJson = JSONObject()
        dataJson.put(ARGUMENT_ATTRIBUTE_NAME, name)
        dataJson.put(ARGUMENT_ATTRIBUTE_VALUE, value)
        dataJson.put(ARGUMENT_TYPE, type)

        if (locationAttribute != null) {
            dataJson.put(ARGUMENT_LOCATION_ATTRIBUTE, locationAttribute)
        }
        userAttributeJSON.put(ARGUMENT_DATA, dataJson)
        return userAttributeJSON
    }

    internal fun getAppStatusPayload(json: JSONObject): JSONObject {
        val appStatusPayload = JSONObject()
        appStatusPayload.put(ARGUMENT_ACCOUNT_META, getAccountMeta(json))
        val dataJSON = JSONObject()
        dataJSON.put(ARGUMENT_APP_STATUS, json.get(ARGUMENT_APP_STATUS))

        appStatusPayload.put(ARGUMENT_DATA, dataJSON)

        return appStatusPayload
    }

    internal fun getLogoutPayload(json: JSONObject): JSONObject {
        val logoutPayload = JSONObject()
        logoutPayload.put(ARGUMENT_ACCOUNT_META, getAccountMeta(json))
        return logoutPayload
    }

    internal fun getSDKStatePayload(json: JSONObject, state: Boolean): JSONObject {
        val sdkStatePayload = JSONObject()
        sdkStatePayload.put(ARGUMENT_ACCOUNT_META, getAccountMeta(json))
        val dataJSON = JSONObject()
        dataJSON.put(ARGUMENT_IS_SDK_ENABLED, state)
        sdkStatePayload.put(ARGUMENT_DATA, dataJSON)

        return sdkStatePayload
    }

    internal fun getShowInAppPayload(json: JSONObject): JSONObject {
        val showInAppPayload = JSONObject()
        showInAppPayload.put(ARGUMENT_ACCOUNT_META, getAccountMeta(json))
        return showInAppPayload
    }

    internal fun getSelfHandledInAppPayload(json: JSONObject): JSONObject {
        val selfHandledInAppPayload = JSONObject()
        selfHandledInAppPayload.put(ARGUMENT_ACCOUNT_META, getAccountMeta(json))
        return selfHandledInAppPayload
    }

    internal fun toSelfHandledCallbackPayload(
        selfHandledJson: JSONObject,
        type: String
    ): JSONObject {
        val dataJSON = selfHandledJson.getJSONObject(ARGUMENT_DATA).put(ARGUMENT_TYPE, type)
        selfHandledJson.put(ARGUMENT_DATA, dataJSON)
        return selfHandledJson
    }

    internal fun toAppContextPayload(appContextJson: JSONObject): JSONObject {
        val appContextPayload = JSONObject()
        appContextPayload.put(ARGUMENT_ACCOUNT_META, getAccountMeta(appContextJson))

        val dataJson = JSONObject()
        dataJson.put(ARGUMENT_CONTEXTS, appContextJson.getJSONArray(ARGUMENT_CONTEXTS))
        appContextPayload.put(ARGUMENT_DATA, dataJson)

        return appContextPayload
    }

    internal fun toResetAppContextPayload(json: JSONObject): JSONObject {
        val resetAppContextPayload = JSONObject()
        resetAppContextPayload.put(ARGUMENT_ACCOUNT_META, getAccountMeta(json))
        return resetAppContextPayload
    }

    fun toOptOutTrackingJson(json: JSONObject, type: String, state: Boolean): JSONObject {
        val optOutPayload = JSONObject()
        optOutPayload.put(ARGUMENT_ACCOUNT_META, getAccountMeta(json))

        val dataJson = JSONObject()
        dataJson.put(ARGUMENT_TYPE, type)
        dataJson.put(ARGUMENT_STATE, state)
        optOutPayload.put(ARGUMENT_DATA, dataJson)

        return optOutPayload
    }

    fun toPushTokenJson(json: JSONObject, pushService: PushService): JSONObject {
        val pushTokenPayload = JSONObject()
        pushTokenPayload.put(ARGUMENT_ACCOUNT_META, getAccountMeta(json))

        val dataJson = JSONObject()
        dataJson.put(ARGUMENT_TOKEN, json.getString(ARGUMENT_TOKEN))
        dataJson.put(ARGUMENT_SERVICE, pushService.name)
        pushTokenPayload.put(ARGUMENT_DATA, dataJson)

        return pushTokenPayload
    }

    fun toPushPayloadJson(json: JSONObject, pushService: PushService): JSONObject {
        val pushPayloadPayload = JSONObject()
        pushPayloadPayload.put(ARGUMENT_ACCOUNT_META, getAccountMeta(json))

        val dataJson = JSONObject()
        dataJson.put(ARGUMENT_PAYLOAD, json.getJSONObject(ARGUMENT_PAYLOAD))
        dataJson.put(ARGUMENT_SERVICE, pushService.name)
        pushPayloadPayload.put(ARGUMENT_DATA, dataJson)

        return pushPayloadPayload
    }

    fun toADIdTrackingStatusJson(json: JSONObject, state: Boolean): JSONObject {
        val adIdTrackingStatus = JSONObject()
        adIdTrackingStatus.put(ARGUMENT_ACCOUNT_META, getAccountMeta(json))

        val dataJson = JSONObject()
        dataJson.put(ARGUMENT_AD_ID_TRACKING, state)
        adIdTrackingStatus.put(ARGUMENT_DATA, dataJson)
        return adIdTrackingStatus
    }

    fun toAndroidIdTrackingStatusJson(json: JSONObject, state: Boolean): JSONObject {
        val androidIdTrackingStatus = JSONObject()
        androidIdTrackingStatus.put(ARGUMENT_ACCOUNT_META, getAccountMeta(json))

        val dataJson = JSONObject()
        dataJson.put(ARGUMENT_ANDROID_ID_TRACKING, state)
        androidIdTrackingStatus.put(ARGUMENT_DATA, dataJson)
        return androidIdTrackingStatus
    }

    fun toPushPermissionResponsePayload(json: JSONObject): JSONObject {
        val payload = JSONObject()
        payload.put(ARGUMENT_IS_GRANTED, json.get(ARGUMENT_IS_GRANTED))
        payload.put(ARGUMENT_TYPE, PermissionType.PUSH.name)
        payload.put(ARGUMENT_PLATFORM, PLATFORM_ANDROID)

        return payload
    }

    private fun getAccountMeta(json: JSONObject): JSONObject {
        return JSONObject().put(ARGUMENT_APP_ID, json.getString(ARGUMENT_APP_ID))
    }

    fun toDeviceIdTrackingStatusJson(json: JSONObject, state: Boolean): JSONObject {
        val deviceIdTrackingStatus = JSONObject()
        deviceIdTrackingStatus.put(ARGUMENT_ACCOUNT_META, getAccountMeta(json))

        val dataJson = JSONObject()
        dataJson.put(ARGUMENT_DEVICE_ID_TRACKING, state)
        deviceIdTrackingStatus.put(ARGUMENT_DATA, dataJson)
        return deviceIdTrackingStatus

    }

    fun toPushPermissionRequestCountPayload(json: JSONObject): JSONObject {
        val payload = JSONObject()
        payload.put(ARGUMENT_ACCOUNT_META, getAccountMeta(json))
        val dataJson = JSONObject()
        dataJson.put(ARGUMENT_PUSH_OPT_IN_ATTEMPT_COUNT, json.get(PUSH_OPT_IN_ATTEMPT_COUNT))
        payload.put(ARGUMENT_DATA, dataJson)
        return payload

    }

    /**
     * Transforms plugin call data to plugin helper payload for delete user API
     *
     * @param json instance of [JSONObject]
     * @return [JSONObject] containing payload for delete user API
     */
    fun toDeleteUserPayload(json: JSONObject): JSONObject {
        val deleteUserPayload = JSONObject()
        deleteUserPayload.put(ARGUMENT_ACCOUNT_META, getAccountMeta(json))
        return deleteUserPayload
    }

    /**
     * Transforms native [UserDeletionData] to capacitor [JSObject]
     *
     * @param userDeletionData instance of [UserDeletionData]
     * @return instance of [JSObject]
     */
    fun userDeletionDataToJSObject(userDeletionData: UserDeletionData): JSObject {
        val userDeletionDataJs = JSObject()
        userDeletionDataJs.put(
            ARGUMENT_ACCOUNT_META,
            JSONObject().put(ARGUMENT_APP_ID, userDeletionData.accountMeta.appId)
        )
        userDeletionDataJs.put(ARGUMENT_IS_SUCCESS, userDeletionData.isSuccess)
        return userDeletionDataJs
    }
}
