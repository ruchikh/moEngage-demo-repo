/*
 * Copyright (c) 2014-2022 MoEngage Inc.
 *
 * All rights reserved.
 *
 *  Use of source code or binaries contained within MoEngage SDK is permitted only to enable use of the MoEngage platform by customers of MoEngage.
 *  Modification of source code and inclusion in mobile apps is explicitly allowed provided that all other conditions are met.
 *  Neither the name of MoEngage nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
 *  Redistribution of source code or binaries is disallowed except with specific prior written permission. Any such redistribution must retain the above copyright notice, this list of conditions and the following disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.moengage.capacitor

import com.getcapacitor.JSObject
import com.getcapacitor.Plugin
import com.getcapacitor.PluginCall
import com.getcapacitor.PluginMethod
import com.getcapacitor.annotation.CapacitorPlugin
import com.moengage.capacitor.internal.EventEmitterImpl
import com.moengage.capacitor.internal.GDPR_OPT_OUT_TYPE_DATA
import com.moengage.capacitor.internal.MODULE_TAG
import com.moengage.capacitor.internal.PayloadTransformer
import com.moengage.capacitor.internal.SELF_HANDLED_INAPP_CALLBACK_TYPE_CLICK
import com.moengage.capacitor.internal.SELF_HANDLED_INAPP_CALLBACK_TYPE_DISMISSED
import com.moengage.capacitor.internal.SELF_HANDLED_INAPP_CALLBACK_TYPE_IMPRESSION
import com.moengage.core.LogLevel
import com.moengage.core.internal.logger.Logger
import com.moengage.core.internal.utils.isNullOrBlank
import com.moengage.plugin.base.internal.DataTrackingHelper
import com.moengage.plugin.base.internal.PluginHelper
import com.moengage.plugin.base.internal.setEventEmitter
import com.moengage.pushbase.model.PushService
import org.json.JSONObject

@CapacitorPlugin(name = "MoECapacitorCore")
public class MoECapacitorCorePlugin : Plugin() {

    private val tag = MODULE_TAG
    private val pluginHelper = PluginHelper()
    private val dataTrackingHelper = DataTrackingHelper()
    private val payloadTransformer = PayloadTransformer()

    @PluginMethod
    public fun initialize(call: PluginCall) {
        try {
            setEventEmitter(EventEmitterImpl(::sendCallback))
            Logger.print { "$tag initialize() : ${call.data}" }
            pluginHelper.initialise(payloadTransformer.getInitialisePayload(call.data))
            Logger.print { "$tag initialize() : completed" }
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag initialize() : " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun trackEvent(call: PluginCall) {
        try {
            Logger.print { "$tag trackEvent() : ${call.data}" }
            val eventPayload = payloadTransformer.toEventPayload(call.data)
            Logger.print { "$tag tracKEvent() : $eventPayload" }

            pluginHelper.trackEvent(context, eventPayload)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag trackEvent(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun setUniqueId(call: PluginCall) {
        try {
            Logger.print { "$tag setUniqueId() : ${call.data}" }
            val uniqueIdPayload = payloadTransformer.toUniqueIdPayload(call.data)
            Logger.print { "$tag setUniqueId() : $uniqueIdPayload" }
            pluginHelper.setUserAttribute(context, uniqueIdPayload)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag setUniqueId(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun setAlias(call: PluginCall) {
        try {
            Logger.print { "$tag setAlias() : ${call.data}" }
            val aliasPayload = payloadTransformer.toAliasPayload(call.data)
            Logger.print { "$tag setAlias() : $aliasPayload" }
            pluginHelper.setAlias(context, aliasPayload)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag setAlias(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun setUserName(call: PluginCall) {
        try {
            Logger.print { "$tag setUserName() : ${call.data}" }
            val usernamePayload = payloadTransformer.toUserNamePayload(call.data)
            Logger.print { "$tag setUserName() : $usernamePayload" }
            pluginHelper.setUserAttribute(context, usernamePayload)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag setUserName(): " }
        }
        call.resolve()
    }


    @PluginMethod
    public fun setFirstName(call: PluginCall) {
        try {
            Logger.print { "$tag setFirstName() : ${call.data}" }
            val userFirstNameJson = payloadTransformer.toUserFirstNameJson(call.data)
            pluginHelper.setUserAttribute(context, userFirstNameJson)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag setFirstName(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun setLastName(call: PluginCall) {
        try {
            Logger.print { "$tag setLastName() : ${call.data}" }
            val userLastNameJson = payloadTransformer.toUserLastNameJson(call.data)
            pluginHelper.setUserAttribute(context, userLastNameJson)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag setLastName(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun setEmailId(call: PluginCall) {
        try {
            Logger.print { "$tag setEmailId() : ${call.data}" }
            val emailIdJson = payloadTransformer.toUserEmailIdJson(call.data)
            pluginHelper.setUserAttribute(context, emailIdJson)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag setEmailId(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun setMobileNumber(call: PluginCall) {
        try {
            Logger.print { "$tag setMobileNumber() : ${call.data}" }
            val json = payloadTransformer.toUserMobileNumberJson(call.data)
            pluginHelper.setUserAttribute(context, json)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag setMobileNumber(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun setBirthDate(call: PluginCall) {
        try {
            Logger.print { "$tag setBirthDate() : ${call.data}" }
            val json = payloadTransformer.toUserBirthDateJson(call.data)
            pluginHelper.setUserAttribute(context, json)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag setBirthDate(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun setGender(call: PluginCall) {
        try {
            Logger.print { "$tag setGender() : ${call.data}" }
            val json = payloadTransformer.toUserGenderJson(call.data)
            pluginHelper.setUserAttribute(context, json)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag setGender(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun setUserLocation(call: PluginCall) {
        try {
            Logger.print { "$tag setUserLocation() : ${call.data}" }
            val json = payloadTransformer.toUserLocationJson(call.data)
            pluginHelper.setUserAttribute(context, json)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag setUserLocation(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun setUserAttribute(call: PluginCall) {
        try {
            Logger.print { "$tag setUserAttribute() : ${call.data}" }
            val json = payloadTransformer.toUserAttributeJson(call.data)
            pluginHelper.setUserAttribute(context, json)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag setUserAttribute(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun setUserAttributeDate(call: PluginCall) {
        try {
            Logger.print { "$tag setUserAttributeDate() : ${call.data}" }
            val json = payloadTransformer.toUserUserAttributeISODateJson(call.data)
            pluginHelper.setUserAttribute(context, json)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag setUserAttributeDate(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun setUserAttributeLocation(call: PluginCall) {
        try {
            Logger.print { "$tag setUserAttributeLocation() : ${call.data}" }
            val json = payloadTransformer.toUserAttributeLocationJson(call.data)
            pluginHelper.setUserAttribute(context, json)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag setUserAttributeLocation(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun setAppStatus(call: PluginCall) {
        try {
            Logger.print { "$tag setAppStatus() : ${call.data}" }
            val payload = payloadTransformer.getAppStatusPayload(call.data)
            Logger.print { "$tag setAppStatus() : $payload" }

            pluginHelper.setAppStatus(context, payload)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag setAppStatus(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun logoutUser(call: PluginCall) {
        try {
            Logger.print { "$tag logoutUser() : " }
            pluginHelper.logout(context, payloadTransformer.getLogoutPayload(call.data))
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag logoutUser(): " }
        }
        call.resolve()
    }


    @PluginMethod
    public fun enableSdk(call: PluginCall) {
        try {
            Logger.print { "$tag enableSdk() : " }
            pluginHelper.storeFeatureStatus(
                context,
                payloadTransformer.getSDKStatePayload(call.data, true)
            )
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag enableSdk(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun disableSdk(call: PluginCall) {
        try {
            Logger.print { "$tag disableSdk() : " }
            pluginHelper.storeFeatureStatus(
                context,
                payloadTransformer.getSDKStatePayload(call.data, false)
            )
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag disableSdk(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun showInApp(call: PluginCall) {
        try {
            Logger.print { "$tag showInApp() : " }
            pluginHelper.showInApp(context, payloadTransformer.getShowInAppPayload(call.data))
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag showInApp(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun getSelfHandledInApp(call: PluginCall) {
        try {
            Logger.print { "$tag getSelfHandledInApp() : " }
            pluginHelper.getSelfHandledInApp(
                context,
                payloadTransformer.getSelfHandledInAppPayload(call.data)
            )
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag getSelfHandledInApp(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun selfHandledShown(call: PluginCall) {
        try {
            Logger.print { "$tag selfHandledShown() : ${call.data}" }
           selfHandledCallback(call, SELF_HANDLED_INAPP_CALLBACK_TYPE_IMPRESSION)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag selfHandledShown(): " }
        }
        call.resolve()
    }


    @PluginMethod
    public fun selfHandledClicked(call: PluginCall) {
        try {
            Logger.print { "$tag selfHandledClicked() : ${call.data}" }
            selfHandledCallback(call, SELF_HANDLED_INAPP_CALLBACK_TYPE_CLICK)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag selfHandledClicked(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun selfHandledDismissed(call: PluginCall) {
        try {
            Logger.print { "$tag selfHandledDismissed() : ${call.data}" }
            selfHandledCallback(call, SELF_HANDLED_INAPP_CALLBACK_TYPE_DISMISSED)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag selfHandledDismissed(): " }
        }
        call.resolve()
    }


    @PluginMethod
    public fun setInAppContext(call: PluginCall) {
        try {
            Logger.print { "$tag setInAppContext() : ${call.data}" }
            pluginHelper.setAppContext(context, payloadTransformer.toAppContextPayload(call.data))
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag setInAppContext(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun resetInAppContext(call: PluginCall) {
        try {
            Logger.print { "$tag resetInAppContext() : ${call.data}" }
            pluginHelper.resetAppContext(
                context,
                payloadTransformer.toResetAppContextPayload(call.data)
            )
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag resetInAppContext(): " }
        }
        call.resolve()
    }


    @PluginMethod
    public fun enableDataTracking(call: PluginCall) {
        try {
            Logger.print { "$tag enableDataTracking() : ${call.data}" }
            pluginHelper.optOutTracking(
                context,
                payloadTransformer.toOptOutTrackingJson(call.data, GDPR_OPT_OUT_TYPE_DATA, false)
            )
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag enableDataTracking(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun disableDataTracking(call: PluginCall) {
        try {
            Logger.print { "$tag disableDataTracking() : ${call.data}" }
            pluginHelper.optOutTracking(
                context,
                payloadTransformer.toOptOutTrackingJson(call.data, GDPR_OPT_OUT_TYPE_DATA, true)
            )
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag disableDataTracking(): " }
        }
        call.resolve()
    }


    @PluginMethod
    public fun passFcmPushToken(call: PluginCall) {
        try {
            Logger.print { "$tag passFcmPushToken() : ${call.data}" }
            pluginHelper.passPushToken(
                context,
                payloadTransformer.toPushTokenJson(call.data, PushService.FCM)
            )
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag passFcmPushToken(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun passFcmPushPayload(call: PluginCall) {
        try {
            Logger.print { "$tag passFcmPushPayload() : ${call.data}" }
            pluginHelper.passPushPayload(
                context,
                payloadTransformer.toPushPayloadJson(call.data, PushService.FCM)
            )
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag passFcmPushPayload(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun onOrientationChanged(call: PluginCall) {
        try {
            Logger.print { "$tag onOrientationChanged() :" }
            pluginHelper.onConfigurationChanged()
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag onOrientationChanged(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun registerForPush(call: PluginCall) {
        call.unimplemented("registerForPush() : This API is only for iOS")
    }

    @PluginMethod
    public fun enableAdIdTracking(call: PluginCall) {
        try {
            Logger.print { "$tag enableAdIdTracking() :" }
            pluginHelper.deviceIdentifierTrackingStatusUpdate(
                context,
                payloadTransformer.toADIdTrackingStatusJson(call.data, true)
            )
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag enableAdIdTracking(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun disableAdIdTracking(call: PluginCall) {
        try {
            Logger.print { "$tag disableAdIdTracking() :" }
            pluginHelper.deviceIdentifierTrackingStatusUpdate(
                context,
                payloadTransformer.toADIdTrackingStatusJson(call.data, false)
            )
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag disableAdIdTracking(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun enableAndroidIdTracking(call: PluginCall) {
        try {
            Logger.print { "$tag enableAndroidIdTracking() :" }
            pluginHelper.deviceIdentifierTrackingStatusUpdate(
                context,
                payloadTransformer.toAndroidIdTrackingStatusJson(call.data, true)
            )
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag enableAndroidIdTracking(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun disableAndroidIdTracking(call: PluginCall) {
        try {
            Logger.print { "$tag disableAndroidIdTracking() :" }
            pluginHelper.deviceIdentifierTrackingStatusUpdate(
                context,
                payloadTransformer.toAndroidIdTrackingStatusJson(call.data, false)
            )
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag disableAndroidIdTracking(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun setupNotificationChannelsAndroid(call: PluginCall) {
        try {
            Logger.print { "$tag setupNotificationChannelsAndroid() :" }
            pluginHelper.setUpNotificationChannels(context)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag setupNotificationChannelsAndroid(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun navigateToSettingsAndroid(call: PluginCall) {
        try {
            Logger.print { "$tag navigateToSettingsAndroid() :" }
            pluginHelper.navigateToSettings(context)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag navigateToSettingsAndroid(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun requestPushPermissionAndroid(call: PluginCall) {
        try {
            Logger.print { "$tag requestPushPermissionAndroid() :" }
            pluginHelper.requestPushPermission(context)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag requestPushPermissionAndroid(): " }
        }
        call.resolve()
    }


    @PluginMethod
    public fun pushPermissionResponseAndroid(call: PluginCall) {
        try {
            Logger.print { "$tag pushPermissionResponseAndroid() :" }
            pluginHelper.permissionResponse(
                context,
                payloadTransformer.toPushPermissionResponsePayload(call.data)
            )
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag pushPermissionResponseAndroid(): " }
        }
        call.resolve()
    }

    private fun sendCallback(eventName: String, data: JSObject) {
        Logger.print { "$tag sendCallback() : will notify $eventName event, data: $data" }
        notifyListeners(eventName, data)
    }

    @PluginMethod
    public fun enableDeviceIdTracking(call: PluginCall) {
        try {
            Logger.print { "$tag enableDeviceIdTracking(): " }
            pluginHelper.deviceIdentifierTrackingStatusUpdate(
                context,
                payloadTransformer.toDeviceIdTrackingStatusJson(call.data, true)
            )
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag enableDeviceIdTracking(): " }
        }
        call.resolve()
    }

    @PluginMethod
    public fun disableDeviceIdTracking(call: PluginCall) {
        try {
            Logger.print { "$tag disableDeviceIdTracking(): " }
            pluginHelper.deviceIdentifierTrackingStatusUpdate(
                context,
                payloadTransformer.toDeviceIdTrackingStatusJson(call.data, false)
            )
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag disableDeviceIdTracking(): " }
        }
        call.resolve()
    }


    @PluginMethod
    public fun updatePushPermissionRequestCountAndroid(call: PluginCall) {
        try {
            Logger.print { "$tag updatePushPermissionRequestCountAndroid(): " }
            pluginHelper.updatePushPermissionRequestCount(
                activity,
                payloadTransformer.toPushPermissionRequestCountPayload(call.data)
            )
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag updatePushPermissionRequestCountAndroid(): " }
        }
        call.resolve()
    }

    @PluginMethod(returnType = PluginMethod.RETURN_CALLBACK)
    public fun deleteUser(call: PluginCall) {
        try {
            Logger.print {
                "$tag deleteUser(): will try to delete current user with callbackId=${call.callbackId}"
            }
            pluginHelper.deleteUser(
                context,
                payloadTransformer.toDeleteUserPayload(call.data)
            ) { userDeletionData ->
                Logger.print {
                    "$tag deleteUser(): delete current user response for callbackId=${call.callbackId} userDeletionResponse=$userDeletionData"
                }
                call.resolve(payloadTransformer.userDeletionDataToJSObject(userDeletionData))
            }
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag deleteUser(): " }
        }
    }

    /**
     * Processes Self Handled InApp Callback
     */
    private fun selfHandledCallback(call: PluginCall, actionType: String) {
        try {
            Logger.print { "$tag selfHandledCallback() : ${call.data}" }
            if (call.data.getJSONObject("data").length() == 0) return
            pluginHelper.selfHandledCallback(
                context,
                payloadTransformer.toSelfHandledCallbackPayload(
                    call.data,
                    actionType
                )
            )
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag selfHandledCallback(): " }
        }
        call.resolve()
    }
}