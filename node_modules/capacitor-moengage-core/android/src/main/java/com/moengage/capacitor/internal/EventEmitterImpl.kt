/*
 * Copyright (c) 2014-2022 MoEngage Inc.
 *
 * All rights reserved.
 *
 *  Use of source code or binaries contained within MoEngage SDK is permitted only to enable use of the MoEngage platform by customers of MoEngage.
 *  Modification of source code and inclusion in mobile apps is explicitly allowed provided that all other conditions are met.
 *  Neither the name of MoEngage nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
 *  Redistribution of source code or binaries is disallowed except with specific prior written permission. Any such redistribution must retain the above copyright notice, this list of conditions and the following disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.moengage.capacitor.internal

import com.getcapacitor.JSObject
import com.moengage.core.LogLevel
import com.moengage.core.internal.logger.Logger
import com.moengage.plugin.base.internal.EventEmitter
import com.moengage.plugin.base.internal.clickDataToJson
import com.moengage.plugin.base.internal.inAppDataToJson
import com.moengage.plugin.base.internal.model.events.Event
import com.moengage.plugin.base.internal.model.events.EventType
import com.moengage.plugin.base.internal.model.events.inapp.InAppActionEvent
import com.moengage.plugin.base.internal.model.events.inapp.InAppLifecycleEvent
import com.moengage.plugin.base.internal.model.events.inapp.InAppSelfHandledEvent
import com.moengage.plugin.base.internal.model.events.push.PermissionEvent
import com.moengage.plugin.base.internal.model.events.push.PushClickedEvent
import com.moengage.plugin.base.internal.model.events.push.TokenEvent
import com.moengage.plugin.base.internal.permissionResultToJson
import com.moengage.plugin.base.internal.pushPayloadToJson
import com.moengage.plugin.base.internal.selfHandledDataToJson
import com.moengage.plugin.base.internal.tokenEventToJson
import org.json.JSONObject

/**
 * @author Arshiya Khanum
 */
private val eventMap = mapOf(
    EventType.PUSH_CLICKED to "pushClicked",
    EventType.INAPP_SHOWN to "inAppCampaignShown",
    EventType.INAPP_NAVIGATION to "inAppCampaignClicked",
    EventType.INAPP_CLOSED to "inAppCampaignDismissed",
    EventType.INAPP_CUSTOM_ACTION to "inAppCampaignCustomAction",
    EventType.INAPP_SELF_HANDLED_AVAILABLE to "inAppCampaignSelfHandled",
    EventType.PUSH_TOKEN_GENERATED to "pushTokenGenerated",
    EventType.PERMISSION to "onPermissionResult"
)

internal class EventEmitterImpl(private val onEvent: (String, JSObject) -> Unit) : EventEmitter {

    private val tag = "${MODULE_TAG}EventEmitterImpl"

    override fun emit(event: Event) {
        try {
            Logger.print { "$tag emit() : event: $event" }
            when (event) {
                is InAppActionEvent -> {
                    this.emitInAppActionEvent(event)
                }
                is InAppLifecycleEvent -> {
                    this.emitInAppLifeCycleEvent(event)
                }
                is InAppSelfHandledEvent -> {
                    this.emitInAppSelfHandledEvent(event)
                }
                is PushClickedEvent -> {
                    emitPushEvent(event)
                }
                is TokenEvent -> {
                    emitPushTokenEvent(event)
                }
                is PermissionEvent -> {
                    emitPermissionEvent(event)
                }
            }
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag emit() : " }
        }
    }

    private fun emitInAppActionEvent(inAppActionEvent: InAppActionEvent) {
        try {
            Logger.print { "$tag emitInAppActionEvent() : inAppActionEvent: ${inAppActionEvent
                .eventType} , ${inAppActionEvent.clickData}" }
            val eventType = eventMap[inAppActionEvent.eventType] ?: return
            val campaign: JSONObject = clickDataToJson(inAppActionEvent.clickData)
            emit(eventType, campaign)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag emitInAppActionEvent() : " }
        }
    }

    private fun emitInAppLifeCycleEvent(inAppLifecycleEvent: InAppLifecycleEvent) {
        try {
            Logger.print { "$tag emitInAppLifeCycleEvent() : inAppLifecycleEvent: $inAppLifecycleEvent" }
            val eventType = eventMap[inAppLifecycleEvent.eventType] ?: return
            val campaign = inAppDataToJson(inAppLifecycleEvent.inAppData)
            emit(eventType, campaign)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag emitInAppLifeCycleEvent() : " }
        }
    }

    private fun emitInAppSelfHandledEvent(inAppSelfHandledEvent: InAppSelfHandledEvent) {
        try {
            Logger.print { "$tag emitInAppSelfHandledEvent() : inAppSelfHandledEvent: " +
                    "${inAppSelfHandledEvent.data}" }
            val eventType = eventMap[inAppSelfHandledEvent.eventType]
                ?: return
            val campaign: JSONObject =
                selfHandledDataToJson(inAppSelfHandledEvent.accountMeta, inAppSelfHandledEvent.data)
            emit(eventType, campaign)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag emitInAppSelfHandledEvent() : " }
        }
    }

    private fun emitPushEvent(pushEvent: PushClickedEvent) {
        try {
            Logger.print { "$tag emitPushEvent() : pushEvent: $pushEvent" }
            val eventType = eventMap[pushEvent.eventType] ?: return
            val payload = pushPayloadToJson(pushEvent.payload)
            emit(eventType, payload)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag emitPushEvent() : " }
        }
    }

    private fun emitPushTokenEvent(tokenEvent: TokenEvent) {
        try {
            Logger.print { "$tag emitPushTokenEvent() : tokenEvent: $tokenEvent" }
            val eventType = eventMap[tokenEvent.eventType] ?: return
            val payload = tokenEventToJson(tokenEvent)
            emit(eventType, payload)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag emitPushTokenEvent() : " }
        }
    }

    private fun emitPermissionEvent(event: PermissionEvent) {
        try {
            Logger.print { "$tag emitPermissionEvent() permission event: $event:" }
            val eventType = eventMap[event.eventType] ?: return
            val payload = permissionResultToJson(event.result)
            emit(eventType, payload)
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag emitPermissionEvent() : " }
        }
    }

    private fun emit(methodName: String, payload: JSONObject) {
        try {
            Logger.print { "$tag emit() : methodName: $methodName , payload: $payload" }
            onEvent(methodName, JSObject.fromJSONObject(payload))
        } catch (t: Throwable) {
            Logger.print(LogLevel.ERROR, t) { "$tag emit() : " }
        }
    }
}